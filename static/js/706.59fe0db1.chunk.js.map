{"version":3,"file":"static/js/706.59fe0db1.chunk.js","mappings":"oSAEaA,EAAUC,EAAAA,GAAAA,IAAH,4GAOPC,EAAaD,EAAAA,GAAAA,GAAH,wFAMVE,EAAWF,EAAAA,GAAAA,GAAH,iGAORG,EAAeH,EAAAA,GAAAA,GAAH,2LAYZI,EAAWJ,EAAAA,GAAAA,IAAH,iEAKRK,EAAWL,EAAAA,GAAAA,GAAH,+C,SCsCrB,EA7Da,WACX,OAAwBM,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KA2BA,OAzBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,6FACdF,GAAa,GADC,UAESG,EAAAA,EAAAA,IAAeN,GAFxB,gBAENF,EAFM,EAENA,KACRC,EAAQD,GACRK,GAAa,GAJC,2CAAH,qDAMbE,GACD,GAAE,CAACL,KAkBF,UAACV,EAAD,WACGY,IAAa,SAACK,EAAA,EAAD,KACZT,IAAQ,wBAAI,4BACG,IAAhBA,EAAKU,SAAgB,SAAChB,EAAD,UAAY,SACjB,IAAhBM,EAAKU,SACJ,SAACf,EAAD,UACGK,EAAKW,KAAI,SAAAC,GACR,OACE,UAAChB,EAAD,YACE,gBACEiB,IACED,EAAME,aACFC,EAAAA,GAAU,OAASH,EAAME,a,soKAG/BE,IAAKJ,EAAMK,QAEb,UAACpB,EAAD,YACE,UAACC,EAAD,WAAU,IAAEc,EAAMK,SAClB,yBAAG,cAAYL,EAAMM,kBAXNN,EAAMO,QAe5B,QAKV,C,uFCxEYV,EAAS,WACpB,OACE,SAAC,IAAD,WACE,SAAC,KAAD,CACEW,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,KAIhB,C,0NChBDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAM,mCACCd,EAAU,8BAEVe,EAAmB,mCAAG,+FAC3BC,EAD2B,qCACiBF,GADjB,SAEFD,EAAAA,EAAAA,IAAUG,GAFR,uBAEnBC,EAFmB,EAEzBC,KAFyB,kBAG1BD,GAH0B,2CAAH,qDAMnBE,EAAiB,mCAAG,WAAMC,GAAN,kFACzBJ,EADyB,6BACWI,EADX,oBAC4BN,GAD5B,SAEAD,EAAAA,EAAAA,IAAUG,GAFV,uBAEjBC,EAFiB,EAEvBC,KAFuB,kBAGxBD,GAHwB,2CAAH,sDAKjBI,EAAiB,mCAAG,WAAMlC,GAAN,kFACzB6B,EADyB,gBACF7B,EADE,qBACkB2B,EADlB,4BAEDD,EAAAA,EAAAA,IAAUG,GAFT,uBAEjBM,EAFiB,EAEvBJ,KAFuB,kBAGxBI,GAHwB,2CAAH,sDAKjB7B,EAAc,mCAAG,WAAMN,GAAN,kFACtB6B,EADsB,gBACC7B,EADD,4BAC4B2B,EAD5B,4BAELD,EAAAA,EAAAA,IAAUG,GAFL,uBAEpBE,EAFoB,EAEpBA,KAFoB,kBAGrBA,GAHqB,2CAAH,sDAMdK,EAAiB,mCAAG,WAAMpC,GAAN,kFACzB6B,EADyB,gBACF7B,EADE,4BACyB2B,EADzB,4BAERD,EAAAA,EAAAA,IAAUG,GAFF,uBAEvBE,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,qD","sources":["components/Cast/StyledCast.jsx","components/Cast/Cast.jsx","components/Loader/Loader.jsx","service/api-movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-right: 10px;\n  margin-left: 10px;\n  margin-top: 10px;\n  padding: 15px;\n`;\n\nexport const CastHeader = styled.h2`\n  font-size: 25px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 3 * 20px) / 4);\n  display: flex;\n  flex-wrap: wrap;\n  /* height: 200px; */\n  word-wrap: break-word;\n\n  img {\n    height: 200px;\n  }\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 8px;\n  max-width: 220px;\n`;\n\nexport const CastName = styled.h4`\n  margin-bottom: 5px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { fetchMovieCast, IMG_url } from '../../service/api-movies';\nimport avatar from '../../img/avatar.jpg';\n\nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  Wrapper,\n} from './StyledCast';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getCast = async () => {\n      setIsLoading(true);\n      const { cast } = await fetchMovieCast(movieId);\n      setCast(cast);\n      setIsLoading(false);\n    };\n    getCast();\n  }, [movieId]);\n\n  // console.log(cast);\n\n  // useEffect(() => {\n  //   const getCast = async () => {\n  //     try {\n  //       const { cast } = await fetchMovieCast(movieId);\n  //       setCast(cast);\n  //     } catch (error) {\n  //       console.log(error);\n  //     }\n  //   };\n\n  //   getCast();\n  // }, [movieId]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {!cast && <h2>This movie is not found</h2>}\n      {cast.length !== 0 && <CastHeader>Cast</CastHeader>}\n      {cast.length !== 0 && (\n        <CastList>\n          {cast.map(actor => {\n            return (\n              <CastListItem key={actor.cast_id}>\n                <img\n                  src={\n                    actor.profile_path\n                      ? IMG_url + 'w200' + actor.profile_path\n                      : avatar\n                  }\n                  alt={actor.name}\n                ></img>\n                <CastInfo>\n                  <CastName> {actor.name}</CastName>\n                  <p>Character: {actor.character}</p>\n                </CastInfo>\n              </CastListItem>\n            );\n          })}\n        </CastList>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { StyledLoader } from './StyledLoader';\n\nexport const Loader = () => {\n  return (\n    <StyledLoader>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#3f51b5\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n    </StyledLoader>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst KEY = '20c3d585cb9b647841132b61ed5a8cd8';\nexport const IMG_url = 'https://image.tmdb.org/t/p/';\n\nexport const fetchTrendingMovies = async () => {\n  const queryString = `trending/movie/day?api_key=${KEY}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const fetchSearchMovies = async query => {\n  const queryString = `search/movie?query=${query}&api_key=${KEY}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\nexport const fetchMovieDetails = async movieId => {\n  const queryString = `movie/${movieId}$?api_key=${KEY}&language=en-US`;\n  const { data: movie } = await axios.get(queryString);\n  return movie;\n};\nexport const fetchMovieCast = async movieId => {\n  const queryString = `movie/${movieId}/credits?api_key=${KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const queryString = `movie/${movieId}/reviews?api_key=${KEY}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","useState","cast","setCast","movieId","useParams","isLoading","setIsLoading","useEffect","getCast","fetchMovieCast","Loader","length","map","actor","src","profile_path","IMG_url","alt","name","character","cast_id","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","axios","KEY","fetchTrendingMovies","queryString","movies","data","fetchSearchMovies","query","fetchMovieDetails","movie","fetchMovieReviews"],"sourceRoot":""}